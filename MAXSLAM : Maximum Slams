#include <bits/stdc++.h>
#define mod 1000000007
using namespace std;
#include <ext/pb_ds/assoc_container.hpp> 
#include <ext/pb_ds/tree_policy.hpp> 
using namespace __gnu_pbds; 

bool is_prime(int n) {
  if (n <= 1) return false;
  if (n <= 3) return true;
  if (n % 2 == 0 || n % 3 == 0) return false;
  for (int i = 5; i * i <= n; i += 6) {
      if (n % i == 0 || n % (i + 2) == 0) return false;
  }
  return true;
}

vector<int> sieve(int max_num) {
  vector<bool> is_prime(max_num + 1, true);
  is_prime[0] = is_prime[1] = false;
  for (int i = 2; i * i <= max_num; ++i) {
      if (is_prime[i]) {
          for (int j = i * i; j <= max_num; j += i) {
              is_prime[j] = false;
          }
      }
  }
  vector<int> primes;
  for (int i = 2; i <= max_num; ++i) {
      if (is_prime[i]) {
          primes.push_back(i);
      }
  }
  // return is_prime;
  return primes;
}

bool is_palindrome(int a) {
  string g = to_string(a);
  string cg = g;
  reverse(g.begin(), g.end());
  return g == cg;
}

int factorial(int a) {
  if (a == 1 or a == 0) return 1;
  return factorial(a - 1) * a;
}

long long mod_inverse(long long base, long long exponent, long long modulus) {
  long long result = 1;
  while(exponent > 0) {
    if(exponent % 2 == 1){
      result = (result * base) % modulus;
    }
    base = (base * base) % modulus;
    exponent /= 2;
  }
  return result;
}

void solve() {
  int x;
  cin >> x;
  cout << ceil(double(25-x)/(double)4) << endl;
}

signed main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  int q = 1;
  //cin >> q;
  while (q--) {
    solve();
  }
}
